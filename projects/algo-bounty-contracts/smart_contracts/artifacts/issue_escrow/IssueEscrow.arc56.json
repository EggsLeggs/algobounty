{
    "name": "IssueEscrow",
    "structs": {},
    "methods": [
        {
            "name": "create_bounty",
            "args": [
                {
                    "type": "string",
                    "name": "issue_id"
                },
                {
                    "type": "uint64",
                    "name": "algo_asset"
                },
                {
                    "type": "address",
                    "name": "maintainer"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize a new bounty escrow for a GitHub issue",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fund_bounty",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add ALGO to the existing bounty",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "distribute_payout",
            "args": [
                {
                    "type": "address",
                    "name": "contributor"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Distribute ALGO to a contributor (only maintainer can call)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mark_resolved",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mark the issue as resolved (only maintainer can call)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "refund",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Refund ALGO to maintainer (only maintainer can call)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_bounty_info",
            "args": [],
            "returns": {
                "type": "(string,uint64,uint64,address,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get current bounty information",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Smart contract for escrowing ALGO bounties for a single GitHub issue",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "issue_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "aXNzdWVfaWQ="
                },
                "total_bounty": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfYm91bnR5"
                },
                "algo_asset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWxnb19hc3NldA=="
                },
                "maintainer": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bWFpbnRhaW5lcg=="
                },
                "is_resolved": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aXNfcmVzb2x2ZWQ="
                },
                "initialized": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aW5pdGlhbGl6ZWQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        291,
                        405,
                        552
                    ],
                    "errorMessage": "Amount must be greater than 0"
                },
                {
                    "pc": [
                        193
                    ],
                    "errorMessage": "Bounty already initialized"
                },
                {
                    "pc": [
                        289
                    ],
                    "errorMessage": "Bounty already resolved"
                },
                {
                    "pc": [
                        283
                    ],
                    "errorMessage": "Bounty not initialized"
                },
                {
                    "pc": [
                        402,
                        549
                    ],
                    "errorMessage": "Insufficient bounty funds"
                },
                {
                    "pc": [
                        395
                    ],
                    "errorMessage": "Issue not resolved yet"
                },
                {
                    "pc": [
                        90
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        151
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        199
                    ],
                    "errorMessage": "Only maintainer can create bounty"
                },
                {
                    "pc": [
                        388
                    ],
                    "errorMessage": "Only maintainer can distribute"
                },
                {
                    "pc": [
                        481
                    ],
                    "errorMessage": "Only maintainer can mark resolved"
                },
                {
                    "pc": [
                        539
                    ],
                    "errorMessage": "Only maintainer can refund"
                },
                {
                    "pc": [
                        296,
                        410,
                        557,
                        629
                    ],
                    "errorMessage": "check self.algo_asset exists"
                },
                {
                    "pc": [
                        191,
                        280,
                        642
                    ],
                    "errorMessage": "check self.initialized exists"
                },
                {
                    "pc": [
                        287,
                        392,
                        637
                    ],
                    "errorMessage": "check self.is_resolved exists"
                },
                {
                    "pc": [
                        621
                    ],
                    "errorMessage": "check self.issue_id exists"
                },
                {
                    "pc": [
                        386,
                        479,
                        534,
                        633
                    ],
                    "errorMessage": "check self.maintainer exists"
                },
                {
                    "pc": [
                        321,
                        399,
                        543,
                        625
                    ],
                    "errorMessage": "check self.total_bounty exists"
                },
                {
                    "pc": [
                        165
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        176,
                        274,
                        379,
                        527
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        186,
                        371
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEIBCYHDHRvdGFsX2JvdW50eQphbGdvX2Fzc2V0Cm1haW50YWluZXILaXNfcmVzb2x2ZWQLaW5pdGlhbGl6ZWQIaXNzdWVfaWQEFR98dTEbQQA5MRkURDEYRIIGBP+DdlgElgtuMQQFVoA7BFYayA8EpkDFUgQdQ+68NhoAjgYACQB8ANwBSwF5AdoAMRkUMRgUEEM2GgFJIlmBAghLARUSRFcCADYaAkkVJBJEFzYaA0kVgSASRCInBGVEFEQxAEsBEkQnBUsDZygiZylPAmcqTGcrImcnBCNngBpCb3VudHkgY3JlYXRlZCBmb3IgaXNzdWU6IExQSRUWVwYCTFAnBkxQsCNDNhoBSRUkEkQXIicEZUQjEkQiK2VEFERJRLEiKWVEMgoxALITSwKyErIUshElshAisgGzIihlRAgoTGeAIBUffHUAGkZ1bmRlZCBib3VudHkgc3VjY2Vzc2Z1bGx5sCNDNhoBSRWBIBJENhoCSRUkEkQXMQAiKmVEEkQiK2VEIxJEIihlREoOREsBRLEiKWVEMgqyE0sCshJPA7IUshElshAisgGzTAkoTGeAIBUffHUAGkRpc3RyaWJ1dGVkIHRvIGNvbnRyaWJ1dG9ysCNDMQAiKmVEEkQrI2eAHhUffHUAGElzc3VlIG1hcmtlZCBhcyByZXNvbHZlZLAjQzYaAUkVJBJEFzEAIiplRExLARJEIihlREsCSwEOREsCRLEiKWVEMgqyE0sDshJPArIUshElshAisgGzTAkoTGeAHBUffHUAFlJlZnVuZGVkIHRvIG1haW50YWluZXKwI0MiJwVlRCIoZUQiKWVEIiplRCIrZUQiJwRlREsFFRZXBgJPBlBPBRaAAgBCTFBPBRZQTwRQTwMWUE8CFlBMUCcGTFCwI0M=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}