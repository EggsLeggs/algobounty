/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"IssueEscrow","structs":{},"methods":[{"name":"create_bounty","args":[{"type":"string","name":"issue_id"},{"type":"uint64","name":"algo_asset"},{"type":"address","name":"maintainer"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize a new bounty escrow for a GitHub issue","events":[],"recommendations":{}},{"name":"fund_bounty","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add ALGO to the existing bounty","events":[],"recommendations":{}},{"name":"distribute_payout","args":[{"type":"address","name":"contributor"},{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Distribute ALGO to a contributor (only maintainer can call)","events":[],"recommendations":{}},{"name":"mark_resolved","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mark the issue as resolved (only maintainer can call)","events":[],"recommendations":{}},{"name":"refund","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Refund ALGO to maintainer (only maintainer can call)","events":[],"recommendations":{}},{"name":"get_bounty_info","args":[],"returns":{"type":"(string,uint64,uint64,address,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get current bounty information","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Smart contract for escrowing ALGO bounties for a single GitHub issue","networks":{},"state":{"schema":{"global":{"ints":4,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"issue_id":{"keyType":"AVMString","valueType":"AVMString","key":"aXNzdWVfaWQ="},"total_bounty":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfYm91bnR5"},"algo_asset":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWxnb19hc3NldA=="},"maintainer":{"keyType":"AVMString","valueType":"address","key":"bWFpbnRhaW5lcg=="},"is_resolved":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfcmVzb2x2ZWQ="},"initialized":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW5pdGlhbGl6ZWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[291,405,552],"errorMessage":"Amount must be greater than 0"},{"pc":[193],"errorMessage":"Bounty already initialized"},{"pc":[289],"errorMessage":"Bounty already resolved"},{"pc":[283],"errorMessage":"Bounty not initialized"},{"pc":[402,549],"errorMessage":"Insufficient bounty funds"},{"pc":[395],"errorMessage":"Issue not resolved yet"},{"pc":[90],"errorMessage":"OnCompletion must be NoOp"},{"pc":[151],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[199],"errorMessage":"Only maintainer can create bounty"},{"pc":[388],"errorMessage":"Only maintainer can distribute"},{"pc":[481],"errorMessage":"Only maintainer can mark resolved"},{"pc":[539],"errorMessage":"Only maintainer can refund"},{"pc":[296,410,557,629],"errorMessage":"check self.algo_asset exists"},{"pc":[191,280,642],"errorMessage":"check self.initialized exists"},{"pc":[287,392,637],"errorMessage":"check self.is_resolved exists"},{"pc":[621],"errorMessage":"check self.issue_id exists"},{"pc":[386,479,534,633],"errorMessage":"check self.maintainer exists"},{"pc":[321,399,543,625],"errorMessage":"check self.total_bounty exists"},{"pc":[165],"errorMessage":"invalid number of bytes for (len+utf8[])"},{"pc":[176,274,379,527],"errorMessage":"invalid number of bytes for uint64"},{"pc":[186,371],"errorMessage":"invalid number of bytes for uint8[32]"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAEIBCYHDHRvdGFsX2JvdW50eQphbGdvX2Fzc2V0Cm1haW50YWluZXILaXNfcmVzb2x2ZWQLaW5pdGlhbGl6ZWQIaXNzdWVfaWQEFR98dTEbQQA5MRkURDEYRIIGBP+DdlgElgtuMQQFVoA7BFYayA8EpkDFUgQdQ+68NhoAjgYACQB8ANwBSwF5AdoAMRkUMRgUEEM2GgFJIlmBAghLARUSRFcCADYaAkkVJBJEFzYaA0kVgSASRCInBGVEFEQxAEsBEkQnBUsDZygiZylPAmcqTGcrImcnBCNngBpCb3VudHkgY3JlYXRlZCBmb3IgaXNzdWU6IExQSRUWVwYCTFAnBkxQsCNDNhoBSRUkEkQXIicEZUQjEkQiK2VEFERJRLEiKWVEMgoxALITSwKyErIUshElshAisgGzIihlRAgoTGeAIBUffHUAGkZ1bmRlZCBib3VudHkgc3VjY2Vzc2Z1bGx5sCNDNhoBSRWBIBJENhoCSRUkEkQXMQAiKmVEEkQiK2VEIxJEIihlREoOREsBRLEiKWVEMgqyE0sCshJPA7IUshElshAisgGzTAkoTGeAIBUffHUAGkRpc3RyaWJ1dGVkIHRvIGNvbnRyaWJ1dG9ysCNDMQAiKmVEEkQrI2eAHhUffHUAGElzc3VlIG1hcmtlZCBhcyByZXNvbHZlZLAjQzYaAUkVJBJEFzEAIiplRExLARJEIihlREsCSwEOREsCRLEiKWVEMgqyE0sDshJPArIUshElshAisgGzTAkoTGeAHBUffHUAFlJlZnVuZGVkIHRvIG1haW50YWluZXKwI0MiJwVlRCIoZUQiKWVEIiplRCIrZUQiJwRlREsFFRZXBgJPBlBPBRaAAgBCTFBPBRZQTwRQTwMWUE8CFlBMUCcGTFCwI0M=","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the IssueEscrow contract
 */
export type IssueEscrowArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_bounty(string,uint64,address)string': {
      issueId: string
      algoAsset: bigint | number
      maintainer: string
    }
    'fund_bounty(uint64)string': {
      amount: bigint | number
    }
    'distribute_payout(address,uint64)string': {
      contributor: string
      amount: bigint | number
    }
    'mark_resolved()string': Record<string, never>
    'refund(uint64)string': {
      amount: bigint | number
    }
    'get_bounty_info()(string,uint64,uint64,address,uint64,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_bounty(string,uint64,address)string': [issueId: string, algoAsset: bigint | number, maintainer: string]
    'fund_bounty(uint64)string': [amount: bigint | number]
    'distribute_payout(address,uint64)string': [contributor: string, amount: bigint | number]
    'mark_resolved()string': []
    'refund(uint64)string': [amount: bigint | number]
    'get_bounty_info()(string,uint64,uint64,address,uint64,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type IssueEscrowReturns = {
  'create_bounty(string,uint64,address)string': string
  'fund_bounty(uint64)string': string
  'distribute_payout(address,uint64)string': string
  'mark_resolved()string': string
  'refund(uint64)string': string
  'get_bounty_info()(string,uint64,uint64,address,uint64,uint64)': [string, bigint, bigint, string, bigint, bigint]
}

/**
 * Defines the types of available calls and state of the IssueEscrow smart contract.
 */
export type IssueEscrowTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_bounty(string,uint64,address)string' | 'create_bounty', {
      argsObj: IssueEscrowArgs['obj']['create_bounty(string,uint64,address)string']
      argsTuple: IssueEscrowArgs['tuple']['create_bounty(string,uint64,address)string']
      returns: IssueEscrowReturns['create_bounty(string,uint64,address)string']
    }>
    & Record<'fund_bounty(uint64)string' | 'fund_bounty', {
      argsObj: IssueEscrowArgs['obj']['fund_bounty(uint64)string']
      argsTuple: IssueEscrowArgs['tuple']['fund_bounty(uint64)string']
      returns: IssueEscrowReturns['fund_bounty(uint64)string']
    }>
    & Record<'distribute_payout(address,uint64)string' | 'distribute_payout', {
      argsObj: IssueEscrowArgs['obj']['distribute_payout(address,uint64)string']
      argsTuple: IssueEscrowArgs['tuple']['distribute_payout(address,uint64)string']
      returns: IssueEscrowReturns['distribute_payout(address,uint64)string']
    }>
    & Record<'mark_resolved()string' | 'mark_resolved', {
      argsObj: IssueEscrowArgs['obj']['mark_resolved()string']
      argsTuple: IssueEscrowArgs['tuple']['mark_resolved()string']
      returns: IssueEscrowReturns['mark_resolved()string']
    }>
    & Record<'refund(uint64)string' | 'refund', {
      argsObj: IssueEscrowArgs['obj']['refund(uint64)string']
      argsTuple: IssueEscrowArgs['tuple']['refund(uint64)string']
      returns: IssueEscrowReturns['refund(uint64)string']
    }>
    & Record<'get_bounty_info()(string,uint64,uint64,address,uint64,uint64)' | 'get_bounty_info', {
      argsObj: IssueEscrowArgs['obj']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']
      argsTuple: IssueEscrowArgs['tuple']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']
      returns: IssueEscrowReturns['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        issueId: string
        totalBounty: bigint
        algoAsset: bigint
        maintainer: string
        isResolved: bigint
        initialized: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type IssueEscrowSignatures = keyof IssueEscrowTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type IssueEscrowNonVoidMethodSignatures = keyof IssueEscrowTypes['methods'] extends infer T ? T extends keyof IssueEscrowTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the IssueEscrow smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends IssueEscrowSignatures> = IssueEscrowTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the IssueEscrow smart contract to the method's return type
 */
export type MethodReturn<TSignature extends IssueEscrowSignatures> = IssueEscrowTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = IssueEscrowTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type IssueEscrowCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type IssueEscrowDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: IssueEscrowCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the IssueEscrow smart contract
 */
export abstract class IssueEscrowParamsFactory {
  /**
   * Constructs a no op call for the create_bounty(string,uint64,address)string ABI method
   *
   * Initialize a new bounty escrow for a GitHub issue
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBounty(params: CallParams<IssueEscrowArgs['obj']['create_bounty(string,uint64,address)string'] | IssueEscrowArgs['tuple']['create_bounty(string,uint64,address)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_bounty(string,uint64,address)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.issueId, params.args.algoAsset, params.args.maintainer],
    }
  }
  /**
   * Constructs a no op call for the fund_bounty(uint64)string ABI method
   *
   * Add ALGO to the existing bounty
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundBounty(params: CallParams<IssueEscrowArgs['obj']['fund_bounty(uint64)string'] | IssueEscrowArgs['tuple']['fund_bounty(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fund_bounty(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the distribute_payout(address,uint64)string ABI method
   *
   * Distribute ALGO to a contributor (only maintainer can call)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributePayout(params: CallParams<IssueEscrowArgs['obj']['distribute_payout(address,uint64)string'] | IssueEscrowArgs['tuple']['distribute_payout(address,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distribute_payout(address,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributor, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the mark_resolved()string ABI method
   *
   * Mark the issue as resolved (only maintainer can call)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static markResolved(params: CallParams<IssueEscrowArgs['obj']['mark_resolved()string'] | IssueEscrowArgs['tuple']['mark_resolved()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mark_resolved()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the refund(uint64)string ABI method
   *
   * Refund ALGO to maintainer (only maintainer can call)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static refund(params: CallParams<IssueEscrowArgs['obj']['refund(uint64)string'] | IssueEscrowArgs['tuple']['refund(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'refund(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the get_bounty_info()(string,uint64,uint64,address,uint64,uint64) ABI method
   *
   * Get current bounty information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBountyInfo(params: CallParams<IssueEscrowArgs['obj']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)'] | IssueEscrowArgs['tuple']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_bounty_info()(string,uint64,uint64,address,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the IssueEscrow smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class IssueEscrowFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `IssueEscrowFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new IssueEscrowClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new IssueEscrowClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the IssueEscrow smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: IssueEscrowDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new IssueEscrowClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IssueEscrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IssueEscrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the IssueEscrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new IssueEscrowClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the IssueEscrow smart contract
 */
export class IssueEscrowClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `IssueEscrowClient`
   *
   * @param appClient An `AppClient` instance which has been created with the IssueEscrow app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `IssueEscrowClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends IssueEscrowNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `IssueEscrowClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<IssueEscrowClient> {
    return new IssueEscrowClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `IssueEscrowClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<IssueEscrowClient> {
    return new IssueEscrowClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the IssueEscrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `create_bounty(string,uint64,address)string` ABI method.
     *
     * Initialize a new bounty escrow for a GitHub issue
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBounty: (params: CallParams<IssueEscrowArgs['obj']['create_bounty(string,uint64,address)string'] | IssueEscrowArgs['tuple']['create_bounty(string,uint64,address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IssueEscrowParamsFactory.createBounty(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `fund_bounty(uint64)string` ABI method.
     *
     * Add ALGO to the existing bounty
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundBounty: (params: CallParams<IssueEscrowArgs['obj']['fund_bounty(uint64)string'] | IssueEscrowArgs['tuple']['fund_bounty(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IssueEscrowParamsFactory.fundBounty(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `distribute_payout(address,uint64)string` ABI method.
     *
     * Distribute ALGO to a contributor (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributePayout: (params: CallParams<IssueEscrowArgs['obj']['distribute_payout(address,uint64)string'] | IssueEscrowArgs['tuple']['distribute_payout(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IssueEscrowParamsFactory.distributePayout(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `mark_resolved()string` ABI method.
     *
     * Mark the issue as resolved (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    markResolved: (params: CallParams<IssueEscrowArgs['obj']['mark_resolved()string'] | IssueEscrowArgs['tuple']['mark_resolved()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IssueEscrowParamsFactory.markResolved(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `refund(uint64)string` ABI method.
     *
     * Refund ALGO to maintainer (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    refund: (params: CallParams<IssueEscrowArgs['obj']['refund(uint64)string'] | IssueEscrowArgs['tuple']['refund(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(IssueEscrowParamsFactory.refund(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `get_bounty_info()(string,uint64,uint64,address,uint64,uint64)` ABI method.
     *
     * Get current bounty information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBountyInfo: (params: CallParams<IssueEscrowArgs['obj']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)'] | IssueEscrowArgs['tuple']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(IssueEscrowParamsFactory.getBountyInfo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the IssueEscrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `create_bounty(string,uint64,address)string` ABI method.
     *
     * Initialize a new bounty escrow for a GitHub issue
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBounty: (params: CallParams<IssueEscrowArgs['obj']['create_bounty(string,uint64,address)string'] | IssueEscrowArgs['tuple']['create_bounty(string,uint64,address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IssueEscrowParamsFactory.createBounty(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `fund_bounty(uint64)string` ABI method.
     *
     * Add ALGO to the existing bounty
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundBounty: (params: CallParams<IssueEscrowArgs['obj']['fund_bounty(uint64)string'] | IssueEscrowArgs['tuple']['fund_bounty(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IssueEscrowParamsFactory.fundBounty(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `distribute_payout(address,uint64)string` ABI method.
     *
     * Distribute ALGO to a contributor (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributePayout: (params: CallParams<IssueEscrowArgs['obj']['distribute_payout(address,uint64)string'] | IssueEscrowArgs['tuple']['distribute_payout(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IssueEscrowParamsFactory.distributePayout(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `mark_resolved()string` ABI method.
     *
     * Mark the issue as resolved (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    markResolved: (params: CallParams<IssueEscrowArgs['obj']['mark_resolved()string'] | IssueEscrowArgs['tuple']['mark_resolved()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IssueEscrowParamsFactory.markResolved(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `refund(uint64)string` ABI method.
     *
     * Refund ALGO to maintainer (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    refund: (params: CallParams<IssueEscrowArgs['obj']['refund(uint64)string'] | IssueEscrowArgs['tuple']['refund(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(IssueEscrowParamsFactory.refund(params))
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `get_bounty_info()(string,uint64,uint64,address,uint64,uint64)` ABI method.
     *
     * Get current bounty information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBountyInfo: (params: CallParams<IssueEscrowArgs['obj']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)'] | IssueEscrowArgs['tuple']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(IssueEscrowParamsFactory.getBountyInfo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the IssueEscrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `create_bounty(string,uint64,address)string` ABI method.
     *
     * Initialize a new bounty escrow for a GitHub issue
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBounty: async (params: CallParams<IssueEscrowArgs['obj']['create_bounty(string,uint64,address)string'] | IssueEscrowArgs['tuple']['create_bounty(string,uint64,address)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IssueEscrowParamsFactory.createBounty(params))
      return {...result, return: result.return as unknown as (undefined | IssueEscrowReturns['create_bounty(string,uint64,address)string'])}
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `fund_bounty(uint64)string` ABI method.
     *
     * Add ALGO to the existing bounty
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundBounty: async (params: CallParams<IssueEscrowArgs['obj']['fund_bounty(uint64)string'] | IssueEscrowArgs['tuple']['fund_bounty(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IssueEscrowParamsFactory.fundBounty(params))
      return {...result, return: result.return as unknown as (undefined | IssueEscrowReturns['fund_bounty(uint64)string'])}
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `distribute_payout(address,uint64)string` ABI method.
     *
     * Distribute ALGO to a contributor (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributePayout: async (params: CallParams<IssueEscrowArgs['obj']['distribute_payout(address,uint64)string'] | IssueEscrowArgs['tuple']['distribute_payout(address,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IssueEscrowParamsFactory.distributePayout(params))
      return {...result, return: result.return as unknown as (undefined | IssueEscrowReturns['distribute_payout(address,uint64)string'])}
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `mark_resolved()string` ABI method.
     *
     * Mark the issue as resolved (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    markResolved: async (params: CallParams<IssueEscrowArgs['obj']['mark_resolved()string'] | IssueEscrowArgs['tuple']['mark_resolved()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IssueEscrowParamsFactory.markResolved(params))
      return {...result, return: result.return as unknown as (undefined | IssueEscrowReturns['mark_resolved()string'])}
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `refund(uint64)string` ABI method.
     *
     * Refund ALGO to maintainer (only maintainer can call)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    refund: async (params: CallParams<IssueEscrowArgs['obj']['refund(uint64)string'] | IssueEscrowArgs['tuple']['refund(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(IssueEscrowParamsFactory.refund(params))
      return {...result, return: result.return as unknown as (undefined | IssueEscrowReturns['refund(uint64)string'])}
    },

    /**
     * Makes a call to the IssueEscrow smart contract using the `get_bounty_info()(string,uint64,uint64,address,uint64,uint64)` ABI method.
     *
     * Get current bounty information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBountyInfo: async (params: CallParams<IssueEscrowArgs['obj']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)'] | IssueEscrowArgs['tuple']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(IssueEscrowParamsFactory.getBountyInfo(params))
      return {...result, return: result.return as unknown as (undefined | IssueEscrowReturns['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new IssueEscrowClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current IssueEscrow app
   */
  state = {
    /**
     * Methods to access global state for the current IssueEscrow app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          issueId: result.issue_id,
          totalBounty: result.total_bounty,
          algoAsset: result.algo_asset,
          maintainer: result.maintainer,
          isResolved: result.is_resolved,
          initialized: result.initialized,
        }
      },
      /**
       * Get the current value of the issue_id key in global state
       */
      issueId: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("issue_id")) as string | undefined },
      /**
       * Get the current value of the total_bounty key in global state
       */
      totalBounty: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_bounty")) as bigint | undefined },
      /**
       * Get the current value of the algo_asset key in global state
       */
      algoAsset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("algo_asset")) as bigint | undefined },
      /**
       * Get the current value of the maintainer key in global state
       */
      maintainer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("maintainer")) as string | undefined },
      /**
       * Get the current value of the is_resolved key in global state
       */
      isResolved: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_resolved")) as bigint | undefined },
      /**
       * Get the current value of the initialized key in global state
       */
      initialized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("initialized")) as bigint | undefined },
    },
  }

  public newGroup(): IssueEscrowComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_bounty(string,uint64,address)string method call against the IssueEscrow contract
       */
      createBounty(params: CallParams<IssueEscrowArgs['obj']['create_bounty(string,uint64,address)string'] | IssueEscrowArgs['tuple']['create_bounty(string,uint64,address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBounty(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_bounty(string,uint64,address)string', v))
        return this
      },
      /**
       * Add a fund_bounty(uint64)string method call against the IssueEscrow contract
       */
      fundBounty(params: CallParams<IssueEscrowArgs['obj']['fund_bounty(uint64)string'] | IssueEscrowArgs['tuple']['fund_bounty(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundBounty(params)))
        resultMappers.push((v) => client.decodeReturnValue('fund_bounty(uint64)string', v))
        return this
      },
      /**
       * Add a distribute_payout(address,uint64)string method call against the IssueEscrow contract
       */
      distributePayout(params: CallParams<IssueEscrowArgs['obj']['distribute_payout(address,uint64)string'] | IssueEscrowArgs['tuple']['distribute_payout(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributePayout(params)))
        resultMappers.push((v) => client.decodeReturnValue('distribute_payout(address,uint64)string', v))
        return this
      },
      /**
       * Add a mark_resolved()string method call against the IssueEscrow contract
       */
      markResolved(params: CallParams<IssueEscrowArgs['obj']['mark_resolved()string'] | IssueEscrowArgs['tuple']['mark_resolved()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.markResolved(params)))
        resultMappers.push((v) => client.decodeReturnValue('mark_resolved()string', v))
        return this
      },
      /**
       * Add a refund(uint64)string method call against the IssueEscrow contract
       */
      refund(params: CallParams<IssueEscrowArgs['obj']['refund(uint64)string'] | IssueEscrowArgs['tuple']['refund(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.refund(params)))
        resultMappers.push((v) => client.decodeReturnValue('refund(uint64)string', v))
        return this
      },
      /**
       * Add a get_bounty_info()(string,uint64,uint64,address,uint64,uint64) method call against the IssueEscrow contract
       */
      getBountyInfo(params: CallParams<IssueEscrowArgs['obj']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)'] | IssueEscrowArgs['tuple']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBountyInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_bounty_info()(string,uint64,uint64,address,uint64,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the IssueEscrow contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as IssueEscrowComposer
  }
}
export type IssueEscrowComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_bounty(string,uint64,address)string ABI method.
   *
   * Initialize a new bounty escrow for a GitHub issue
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBounty(params?: CallParams<IssueEscrowArgs['obj']['create_bounty(string,uint64,address)string'] | IssueEscrowArgs['tuple']['create_bounty(string,uint64,address)string']>): IssueEscrowComposer<[...TReturns, IssueEscrowReturns['create_bounty(string,uint64,address)string'] | undefined]>

  /**
   * Calls the fund_bounty(uint64)string ABI method.
   *
   * Add ALGO to the existing bounty
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundBounty(params?: CallParams<IssueEscrowArgs['obj']['fund_bounty(uint64)string'] | IssueEscrowArgs['tuple']['fund_bounty(uint64)string']>): IssueEscrowComposer<[...TReturns, IssueEscrowReturns['fund_bounty(uint64)string'] | undefined]>

  /**
   * Calls the distribute_payout(address,uint64)string ABI method.
   *
   * Distribute ALGO to a contributor (only maintainer can call)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributePayout(params?: CallParams<IssueEscrowArgs['obj']['distribute_payout(address,uint64)string'] | IssueEscrowArgs['tuple']['distribute_payout(address,uint64)string']>): IssueEscrowComposer<[...TReturns, IssueEscrowReturns['distribute_payout(address,uint64)string'] | undefined]>

  /**
   * Calls the mark_resolved()string ABI method.
   *
   * Mark the issue as resolved (only maintainer can call)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  markResolved(params?: CallParams<IssueEscrowArgs['obj']['mark_resolved()string'] | IssueEscrowArgs['tuple']['mark_resolved()string']>): IssueEscrowComposer<[...TReturns, IssueEscrowReturns['mark_resolved()string'] | undefined]>

  /**
   * Calls the refund(uint64)string ABI method.
   *
   * Refund ALGO to maintainer (only maintainer can call)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  refund(params?: CallParams<IssueEscrowArgs['obj']['refund(uint64)string'] | IssueEscrowArgs['tuple']['refund(uint64)string']>): IssueEscrowComposer<[...TReturns, IssueEscrowReturns['refund(uint64)string'] | undefined]>

  /**
   * Calls the get_bounty_info()(string,uint64,uint64,address,uint64,uint64) ABI method.
   *
   * Get current bounty information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBountyInfo(params?: CallParams<IssueEscrowArgs['obj']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)'] | IssueEscrowArgs['tuple']['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)']>): IssueEscrowComposer<[...TReturns, IssueEscrowReturns['get_bounty_info()(string,uint64,uint64,address,uint64,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the IssueEscrow smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): IssueEscrowComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): IssueEscrowComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<IssueEscrowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<IssueEscrowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<IssueEscrowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<IssueEscrowComposerResults<TReturns>>
}
export type IssueEscrowComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

